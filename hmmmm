<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Console Game Launcher</title>
  <style>
    :root{
      --accent: #33ff33;
      --accent-dark: #00cc00;
      --bg: #000000;
      --panel-bg: #001100;
      --muted: #99ff99;
      --matrix-color: #33ff33;
      --animations: 1;
    }

    /* ===== Original styles (kept intact) ===== */
    #bottom-panel {
  display: flex;
  flex-direction: column;
  gap: 10px;
  padding-top: 10px;
}



#search-input {
  flex: 0 0 auto;
}

#category-buttons {
  flex: 0 0 auto;
}
#code-input::-webkit-scrollbar {
  width: 12px;
}

#code-input::-webkit-scrollbar-track {
  background: #000;
  border-radius: 6px;
}

#code-input::-webkit-scrollbar-thumb {
  background: #33ff33;
  border-radius: 6px;
  box-shadow: 0 0 10px rgba(51, 255, 51, 0.5);
}

#code-input::-webkit-scrollbar-thumb:hover {
  background: #55ff55;
  box-shadow: 0 0 15px rgba(51, 255, 51, 0.8);
}

#game-list {
  flex: 1 1 auto;
  overflow-y: auto;
}
#game-list {
  min-height: 200px;
  padding-bottom: 20px;
}

html, body {
  margin: 0;
  padding: 0;
  height: auto; /* instead of 100% */
  background: var(--bg);
  color: var(--accent);
  font-family: 'Courier New', Courier, monospace;
  overflow: auto; /* enable whole page scrolling */
}


    #matrix-bg {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      z-index: 0;
    }

    #container {
  position: relative;
  display: flex;
  flex-direction: column;
  height: auto; /* allow container to grow */
  padding: 10px;
  z-index: 1;
}


    header {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-bottom: 10px;
      position: relative;
    }

    h1 {
  font-size: 72px;
  font-weight: 900;
  margin: 0;
  background: linear-gradient(90deg, var(--accent), var(--accent-dark), var(--accent));
  background-clip: text;              /* standard property */
  -webkit-background-clip: text;     /* WebKit-prefixed */
  -webkit-text-fill-color: transparent;
  text-shadow:
    0 0 10px var(--accent),
    0 0 20px var(--accent),
    0 0 30px var(--accent-dark),
    0 0 40px var(--accent-dark),
    0 0 50px var(--accent-dark);
  animation: shimmer 3s infinite linear;
}

@keyframes shimmer {
  0% { background-position: 0% 50%; }
  100% { background-position: 200% 50%; }
}


    #top-area {
  display: flex;
  gap: 10px;
  min-height: 0;
  height: 70vh; /* about 70% of viewport height */
  overflow: visible; /* no scroll inside top area */
}


    #editor-wrapper {
      display: flex;
      flex-direction: column;
      flex: 0 0 30%;
      border: 2px solid var(--accent);
      padding: 8px;
      background: var(--panel-bg);
      border-radius: 6px;
    }

    #code-input {
      flex-grow: 1;
      width: 100%;
      background: transparent;
      color: var(--accent);
      border: none;
      resize: none;
      padding: 12px;
      font-size: 16px;
      outline: none;
      font-family: 'Courier New', monospace;
      transition: all 0.3s ease;
    }
    
    #code-input:focus {
      text-shadow: 0 0 5px var(--accent);
    }

    .button-row {
      display: flex;
      gap: 8px;
      margin-top: 8px;
    }

    button {
      background: #003300;
      border: 2px solid var(--accent);
      padding: 8px 10px;
      font-weight: bold;
      color: var(--accent);
      cursor: pointer;
      border-radius: 4px;
      font-family: 'Courier New', monospace;
      font-size: 14px;
      transition: all 0.3s ease;
      text-shadow: 0 0 5px var(--accent);
      box-shadow: 0 0 10px rgba(51, 255, 51, 0.3);
    }

    button:hover {
      background: #007700;
      box-shadow: 0 0 20px rgba(51, 255, 51, 0.6);
      transform: translateY(-2px);
    }

    button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    #preview-container {
      flex: 1 1 70%;
      border: 2px solid var(--accent);
      background: #000;
      border-radius: 6px;
      display: flex;
      flex-direction: column;
      position: relative;
    }

    #fullscreen-btn {
      position: absolute;
      top: 8px;
      right: 10px;
      background: none;
      border: none;
      color: var(--accent);
      font-size: 20px;
      cursor: pointer;
      z-index: 10;
    }

    #search-input {
      width: 60%;
      margin: 10px auto;
      padding: 8px;
      font-size: 14px;
      background: #000;
      color: var(--accent);
      border: 2px solid var(--accent);
      border-radius: 4px;
      display: block;
      font-family: 'Courier New', monospace;
      transition: all 0.3s ease;
      box-shadow: 0 0 10px rgba(51, 255, 51, 0.3);
    }
    
    #search-input:focus {
      outline: none;
      box-shadow: 0 0 20px rgba(51, 255, 51, 0.6);
      border-color: #55ff55;
    }
    
    #category-buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin: 10px auto;
      flex-wrap: wrap;
      max-width: 80%;
    }
    
    .category-btn {
      background: #003300;
      border: 2px solid var(--accent);
      color: var(--accent);
      padding: 10px 20px;
      font-size: 14px;
      font-weight: bold;
      border-radius: 6px;
      cursor: pointer;
      font-family: 'Courier New', monospace;
      transition: all 0.3s ease;
      text-shadow: 0 0 5px var(--accent);
      box-shadow: 0 0 10px rgba(51, 255, 51, 0.3);
    }
    
    .category-btn:hover {
      background: #007700;
      box-shadow: 0 0 20px rgba(51, 255, 51, 0.6);
      transform: translateY(-2px);
    }
    
    .category-btn.active {
      background: var(--accent);
      color: #000;
      box-shadow: 0 0 25px var(--accent);
      text-shadow: none;
    }

    #game-list {
  margin-top: 10px;
  padding: 15px;
  border: 2px solid var(--accent);
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
  height: auto !important;       /* enforce auto height */
  max-height: none !important;   /* ensure no max height */
  overflow: visible !important;  /* prevent internal scrolling */
  background: #001100;
  border-radius: 6px;
  box-shadow: 0 0 20px rgba(51, 255, 51, 0.3);
}

    #game-list::-webkit-scrollbar {
      width: 12px;
    }
    
    #game-list::-webkit-scrollbar-track {
      background: #000;
      border-radius: 6px;
    }
    
    #game-list::-webkit-scrollbar-thumb {
      background: var(--accent);
      border-radius: 6px;
      box-shadow: 0 0 10px rgba(51, 255, 51, 0.5);
    }
    
    #game-list::-webkit-scrollbar-thumb:hover {
      background: #55ff55;
      box-shadow: 0 0 15px rgba(51, 255, 51, 0.8);
    }
    
    .game-button {
      background: #003300;
      border: 2px solid var(--accent);
      color: var(--accent);
      padding: 15px;
      font-weight: bold;
      cursor: pointer;
      border-radius: 6px;
      font-family: 'Courier New', monospace;
      font-size: 14px;
      transition: all 0.3s ease;
      text-shadow: 0 0 5px var(--accent);
      box-shadow: 0 0 15px rgba(51, 255, 51, 0.4);
      min-height: 60px;
      display: flex;
      align-items: center;
      justify-content: center;
      text-align: center;
    }
    
    .game-button:hover {
      background: #007700;
      box-shadow: 0 0 25px rgba(51, 255, 51, 0.7);
      transform: translateY(-3px) scale(1.02);
    }

    #admin-panel {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.8);
      justify-content: center;
      align-items: center;
      z-index: 10000;
    }
    
    #admin-panel-content {
      background: #001100;
      border: 3px solid var(--accent);
      border-radius: 10px;
      padding: 20px;
      width: 90%;
      max-width: 600px;
      max-height: 80vh;
      overflow-y: auto;
      box-shadow: 0 0 30px var(--accent);
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    
    #admin-panel-content h2 {
      text-align: center;
      margin: 0 0 15px 0;
      color: var(--accent);
      font-size: 24px;
      text-shadow: 0 0 10px var(--accent);
    }

    .admin-section {
      background: #000;
      border: 1px solid var(--accent);
      border-radius: 6px;
      padding: 15px;
      margin-bottom: 10px;
    }
    
    .admin-section h3 {
      color: var(--accent);
      margin: 0 0 10px 0;
      text-shadow: 0 0 5px var(--accent);
      font-size: 18px;
    }
    
    #admin-panel input, #admin-panel textarea, #admin-panel select {
      width: 100%;
      padding: 8px;
      background: #000;
      color: var(--accent);
      border: 2px solid var(--accent);
      border-radius: 4px;
      font-family: 'Courier New', monospace;
      margin-bottom: 10px;
      box-sizing: border-box;
      transition: all 0.3s ease;
      box-shadow: 0 0 10px rgba(51, 255, 51, 0.3);
    }
    
    #admin-panel input:focus, #admin-panel textarea:focus, #admin-panel select:focus {
      outline: none;
      box-shadow: 0 0 20px rgba(51, 255, 51, 0.6);
      border-color: #55ff55;
    }
    
    #admin-panel button {
      background: #003300;
      border: 2px solid var(--accent);
      color: var(--accent);
      padding: 10px 15px;
      font-weight: bold;
      cursor: pointer;
      border-radius: 4px;
      font-family: 'Courier New', monospace;
      margin: 5px 5px 5px 0;
      transition: all 0.3s ease;
    }
    
    #admin-panel button:hover {
      background: #007700;
      box-shadow: 0 0 15px rgba(51, 255, 51, 0.5);
    }
    
    #close-admin-btn {
      background: #330000 !important;
      border-color: #ff3333 !important;
      color: #ff3333 !important;
      width: 100%;
      margin-top: 10px;
    }
    
    #close-admin-btn:hover {
      background: #770000 !important;
      box-shadow: 0 0 15px rgba(255, 51, 51, 0.5) !important;
    }

    #password-modal {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: #001100;
      border: 2px solid var(--accent);
      padding: 20px;
      border-radius: 6px;
      z-index: 9999;
    }

    #password-modal input {
      width: 100%;
      padding: 6px;
      margin-top: 10px;
      background: #000;
      color: var(--accent);
      border: 1px solid var(--accent);
      font-family: 'Courier New', monospace;
    }
    #container {
  padding-bottom: 60px;
}
/* Custom scrollbar for entire page */
html::-webkit-scrollbar {
  width: 12px;
}

html::-webkit-scrollbar-track {
  background: #000;
  border-radius: 6px;
}

html::-webkit-scrollbar-thumb {
  background: var(--accent);
  border-radius: 6px;
  box-shadow: 0 0 10px rgba(51, 255, 51, 0.5);
}

html::-webkit-scrollbar-thumb:hover {
  background: #55ff55;
  box-shadow: 0 0 15px rgba(51, 255, 51, 0.8);
}

    /* Settings panel styles (slide-out) */
    #settings-btn{position:absolute;right:18px;top:14px;background:none;border:2px solid var(--accent);color:var(--accent);padding:8px;border-radius:6px;cursor:pointer;font-family:'Courier New';font-weight:bold;z-index:5}
    #settings-overlay{position:fixed;inset:0;background:rgba(0,0,0,0.45);backdrop-filter:blur(2px);display:none;z-index:2000}
    #settings-panel{position:fixed;right:-420px;top:0;width:400px;height:100vh;max-height:100vh;background:var(--panel-bg);border-left:3px solid var(--accent);box-shadow: -8px 0 40px rgba(0,0,0,0.6);padding:18px;transition:transform 300ms cubic-bezier(.2,.9,.2,1),right 300ms;z-index:2100;overflow-y:auto;overflow-x:hidden}
    #settings-panel.open{right:0;transform:translateX(0)}
    #settings-panel h2{margin:0 0 12px 0;color:var(--accent)}
    .settings-section{border:1px solid var(--accent);padding:12px;border-radius:8px;margin-bottom:12px;background:#000}
    .swatches{display:flex;gap:8px;flex-wrap:wrap}
    .swatch{width:64px;height:48px;border:2px solid #111;border-radius:6px;cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:12px}
    .swatch.selected{outline:3px solid rgba(51,255,51,0.25)}
    .label{font-size:13px;color:var(--muted);margin-bottom:6px}
    .row{display:flex;align-items:center;gap:8px}
    input[type="range"]{width:100%}
    input[type="color"]{width:48px;height:36px;border:none;background:transparent}
    @media (max-width:520px){#settings-panel{width:100%;right:-100%}}
    
    /* Settings panel scrollbar */
    #settings-panel::-webkit-scrollbar {
      width: 12px;
    }
    
    #settings-panel::-webkit-scrollbar-track {
      background: #000;
      border-radius: 6px;
      margin: 10px 0;
    }
    
    #settings-panel::-webkit-scrollbar-thumb {
      background: var(--accent);
      border-radius: 6px;
      box-shadow: 0 0 10px rgba(51, 255, 51, 0.5);
      border: 2px solid #000;
    }
    
    #settings-panel::-webkit-scrollbar-thumb:hover {
      background: #55ff55;
      box-shadow: 0 0 15px rgba(51, 255, 51, 0.8);
    }
    
    #settings-panel::-webkit-scrollbar-corner {
      background: #000;
    }

    /* disable transitions when animations off */
    .no-animations *{transition:none !important}

    /* Theme styles - Dramatically different themes */
    .theme-crt {
      --accent: #00ff00;
      --accent-dark: #00cc00;
      --bg: #001100;
      --panel-bg: #002200;
      --muted: #99ff99;
      --matrix-color: #00ff00;
      filter: contrast(1.3) brightness(0.8);
    }
    
    .theme-crt body {
      background: 
        radial-gradient(circle at center, #001100 0%, #000 70%),
        repeating-linear-gradient(
          0deg,
          transparent,
          transparent 2px,
          rgba(0,255,0,0.02) 2px,
          rgba(0,255,0,0.02) 4px
        );
      background-attachment: fixed;
    }
    
    .theme-crt::after {
      content: '';
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: 
        repeating-linear-gradient(
          0deg,
          transparent,
          transparent 2px,
          rgba(0,255,0,0.08) 2px,
          rgba(0,255,0,0.08) 3px
        );
      pointer-events: none;
      z-index: 1;
      animation: crt-flicker 0.15s infinite linear alternate;
    }
    
    @keyframes crt-flicker {
      0% { opacity: 1; }
      98% { opacity: 1; }
      99% { opacity: 0.98; }
      100% { opacity: 1; }
    }
    
    .theme-neon {
      --accent: #ff0080;
      --accent-dark: #cc0066;
      --bg: #0a0020;
      --panel-bg: #200040;
      --muted: #ff80c0;
      --matrix-color: #ff0080;
    }
    
    .theme-neon body {
      background: 
        radial-gradient(circle at 20% 80%, #ff008020 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, #8000ff20 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, #ff004020 0%, transparent 50%),
        linear-gradient(135deg, #0a0020 0%, #200040 100%);
      background-attachment: fixed;
    }
    
    .theme-neon * {
      text-shadow: 0 0 5px currentColor;
    }
    
    .theme-neon h1 {
      animation: neon-pulse 2s infinite alternate;
      font-size: 84px !important;
    }
    
    @keyframes neon-pulse {
      from { 
        text-shadow: 0 0 5px var(--accent), 0 0 10px var(--accent), 0 0 15px var(--accent);
        filter: hue-rotate(0deg);
      }
      to { 
        text-shadow: 0 0 10px var(--accent), 0 0 20px var(--accent), 0 0 30px var(--accent);
        filter: hue-rotate(10deg);
      }
    }
    
    .theme-pixel {
      --accent: #ffff00;
      --accent-dark: #cccc00;
      --bg: #000080;
      --panel-bg: #000040;
      --muted: #ffff80;
      --matrix-color: #ffff00;
      font-family: 'Courier New', monospace;
      image-rendering: pixelated;
    }
    
    .theme-pixel body {
      background: 
        repeating-conic-gradient(from 0deg at 50% 50%, #000080 0deg 90deg, #000040 90deg 180deg),
        repeating-linear-gradient(90deg, #000080 0px, #000080 20px, #000040 20px, #000040 40px);
      background-size: 40px 40px, 40px 40px;
      background-attachment: fixed;
    }
    
    .theme-pixel * {
      border-radius: 0 !important;
      font-family: 'Courier New', monospace !important;
    }
    
    .theme-pixel button {
      box-shadow: 4px 4px 0px #000 !important;
      transform: none !important;
    }
    
    .theme-pixel button:hover {
      transform: translate(-2px, -2px) !important;
      box-shadow: 6px 6px 0px #000 !important;
    }
    
    .theme-stealth {
      --accent: #888888;
      --accent-dark: #666666;
      --bg: #1a1a1a;
      --panel-bg: #2a2a2a;
      --muted: #cccccc;
      --matrix-color: #888888;
    }
    
    .theme-stealth body {
      background: 
        linear-gradient(45deg, #1a1a1a 25%, transparent 25%),
        linear-gradient(-45deg, #1a1a1a 25%, transparent 25%),
        linear-gradient(45deg, transparent 75%, #0a0a0a 75%),
        linear-gradient(-45deg, transparent 75%, #0a0a0a 75%);
      background-size: 30px 30px;
      background-position: 0 0, 0 15px, 15px -15px, -15px 0px;
      background-attachment: fixed;
    }
    
    .theme-stealth button:hover {
      background: #444 !important;
      box-shadow: 0 0 10px rgba(255,255,255,0.1) !important;
    }
    
    .theme-stealth h1 {
      color: transparent !important;
      background: linear-gradient(90deg, #888, #ccc, #888);
      background-clip: text;
      -webkit-background-clip: text;
    }
    
    .theme-dynamic {
      --accent: #4ecdc4;
      --accent-dark: #45b7aa;
      --bg: #0f0f23;
      --panel-bg: rgba(30,30,60,0.9);
      --muted: #96ceb4;
      --matrix-color: #4ecdc4;
    }
    
    .theme-dynamic body {
      background: 
        radial-gradient(circle at 25% 25%, #4ecdc440 0%, transparent 50%),
        radial-gradient(circle at 75% 75%, #ff6b9d40 0%, transparent 50%),
        linear-gradient(45deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
      background-attachment: fixed;
      animation: dynamic-bg 20s ease-in-out infinite;
    }
    
    @keyframes dynamic-bg {
      0%, 100% { filter: hue-rotate(0deg) brightness(1); }
      25% { filter: hue-rotate(90deg) brightness(1.1); }
      50% { filter: hue-rotate(180deg) brightness(0.9); }
      75% { filter: hue-rotate(270deg) brightness(1.1); }
    }
    
    /* Swatch colors to match themes */
    .swatch[data-theme="matrix"] { background: #001100; color: #33ff33; border-color: #33ff33; }
    .swatch[data-theme="crt"] { background: #001100; color: #00ff00; border-color: #00ff00; }
    .swatch[data-theme="neon"] { background: #1a0020; color: #ff0080; border-color: #ff0080; }
    .swatch[data-theme="pixel"] { background: #000040; color: #ffff00; border-color: #ffff00; }
    .swatch[data-theme="stealth"] { background: #1a1a1a; color: #666666; border-color: #666666; }
    .swatch[data-theme="dynamic"] { background: linear-gradient(45deg, #16213e, #4ecdc4); color: #fff; border-color: #4ecdc4; }

  </style>
</head>
<body>
  <canvas id="matrix-bg"></canvas>

  <div id="password-modal">
    <div>Enter Admin Password:</div>
    <input type="password" id="admin-password-input" />
  </div>
  
  <!-- Login Modal -->
  <div id="login-modal" style="display:none;position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.8);justify-content:center;align-items:center;z-index:10001;">
    <div style="background:var(--panel-bg);border:3px solid var(--accent);border-radius:10px;padding:30px;width:400px;box-shadow:0 0 30px var(--accent);">
      <h2 style="color:var(--accent);text-align:center;margin:0 0 20px 0;">Login to Game Launcher</h2>
      <div id="login-form">
        <input type="email" id="login-email" placeholder="Email" style="width:100%;padding:10px;margin-bottom:15px;background:#000;color:var(--accent);border:2px solid var(--accent);border-radius:4px;font-family:'Courier New';">
        <input type="password" id="login-password" placeholder="Password" style="width:100%;padding:10px;margin-bottom:20px;background:#000;color:var(--accent);border:2px solid var(--accent);border-radius:4px;font-family:'Courier New';">
        <div style="display:flex;gap:10px;">
          <button id="login-submit-btn" style="flex:1;padding:12px;background:#003300;border:2px solid var(--accent);color:var(--accent);border-radius:4px;font-family:'Courier New';font-weight:bold;cursor:pointer;">Login</button>
          <button id="signup-btn" style="flex:1;padding:12px;background:#003300;border:2px solid var(--accent);color:var(--accent);border-radius:4px;font-family:'Courier New';font-weight:bold;cursor:pointer;">Sign Up</button>
        </div>
        <button id="login-cancel-btn" style="width:100%;padding:8px;margin-top:10px;background:#330000;border:2px solid #ff3333;color:#ff3333;border-radius:4px;font-family:'Courier New';cursor:pointer;">Cancel</button>
      </div>
      <div id="login-status" style="margin-top:15px;text-align:center;color:var(--muted);font-size:14px;"></div>
    </div>
  </div>

  <div id="container">
    <header>
      <h1>Game Launcher</h1>
      <div style="position:absolute;right:70px;top:14px;display:flex;gap:10px;align-items:center;">
        <button id="login-btn" style="background:none;border:2px solid var(--accent);color:var(--accent);padding:8px 12px;border-radius:6px;cursor:pointer;font-family:'Courier New';font-weight:bold;">Login</button>
        <div id="user-info" style="display:none;color:var(--accent);font-size:14px;">Welcome, <span id="user-name"></span> | <button id="logout-btn" style="background:none;border:none;color:var(--accent);cursor:pointer;text-decoration:underline;">Logout</button></div>
      </div>
      <button id="settings-btn" title="Settings">⚙️</button>
    </header>
    <div id="top-area">
      <div id="editor-wrapper">
        <textarea id="code-input" placeholder="Paste your full HTML/JS/CSS code here..."></textarea>
        <div class="button-row">
          <button id="run-btn">Run Game</button>
          <button id="run-newtab-btn">Run in New Tab</button>
        </div>
      </div>
      <div id="preview-container">
        <button id="fullscreen-btn" title="Fullscreen">&#x26F6;</button>
<button id="exit-fullscreen-btn" style="display: none; position: fixed; top: 10px; right: 10px; z-index: 10000; padding: 8px 12px; background: #330000; color: #ff3333; border: 2px solid #ff3333; border-radius: 4px; font-weight: bold; font-family: 'Courier New', monospace; cursor: pointer; box-shadow: 0 0 10px rgba(255, 51, 51, 0.5);">Exit Fullscreen</button>

      </div>
    </div>
    <div id="bottom-panel">
      <input type="text" id="search-input" placeholder="Search games..." />
      <div id="category-buttons">
        <button class="category-btn active" data-category="">All</button>
        <button class="category-btn" data-category="Arcade">Arcade</button>
        <button class="category-btn" data-category="Sports">Sports</button>
        <button class="category-btn" data-category="Puzzle">Puzzle</button>
        <button class="category-btn" data-category="Action">Action</button>
        <button class="category-btn" data-category="Strategy">Strategy</button>
      </div>
      
      <!-- Favorites section -->
      <div id="favorites-section" style="margin-bottom:15px;">
        <div style="display:flex;align-items:center;margin-bottom:10px;color:var(--accent);">
          <span style="font-size:18px;font-weight:bold;">★ Favorites</span>
          <span id="favorites-count" style="margin-left:8px;color:var(--muted);font-size:14px;">(0)</span>
        </div>
        <div id="favorites-list" style="display:grid;grid-template-columns:repeat(auto-fill,minmax(180px,1fr));gap:10px;margin-bottom:10px;"></div>
      </div>
      
      <!-- Recently Played section -->
      <div id="recent-section" style="margin-bottom:15px;">
        <div style="display:flex;align-items:center;margin-bottom:10px;color:var(--accent);">
          <span style="font-size:18px;font-weight:bold;">🕘 Recently Played</span>
          <span id="recent-count" style="margin-left:8px;color:var(--muted);font-size:14px;">(0)</span>
        </div>
        <div id="recent-list" style="display:grid;grid-template-columns:repeat(auto-fill,minmax(180px,1fr));gap:10px;margin-bottom:10px;"></div>
      </div>
      
      <!-- Session info -->
      <div id="session-info" style="margin-bottom:15px;padding:10px;background:var(--panel-bg);border:1px solid var(--accent);border-radius:6px;display:none;">
        <div style="color:var(--accent);font-weight:bold;">Current Session</div>
        <div style="color:var(--muted);font-size:14px;">
          Game: <span id="session-game">None</span><br/>
          Time: <span id="session-time">00:00:00</span>
        </div>
      </div>
      
      <div id="game-list">Loading games...</div>
    </div>

    
    <div id="admin-panel">
      <div id="admin-panel-content">
        <h2>🎮 Admin Control Panel 🎮</h2>
        
        <div class="admin-section">
          <h3>Add New Game</h3>
          <input id="game-name" placeholder="Game Name" />
          <div style="display: flex; gap: 10px; align-items: center; margin-bottom: 10px;">
            <select id="game-category-select" style="flex: 1; background: #000; color: var(--accent); border: 2px solid var(--accent); border-radius: 4px; font-family: 'Courier New', monospace; padding: 8px;" multiple size="4">
              <option value="">Select category...</option>
            </select>
            <button id="show-add-category-btn" style="flex-shrink: 0; padding: 8px 12px; cursor: pointer;">Add Category</button>
          </div>
          
          <div id="new-category-container" style="display: none; margin-bottom: 10px;">
            <input id="new-category-input" placeholder="New category name" style="width: 100%; background: #000; color: var(--accent); border: 2px solid var(--accent); border-radius: 4px; font-family: 'Courier New', monospace; padding: 8px;" />
            <button id="add-category-btn" style="margin-top: 5px; padding: 8px 12px; cursor: pointer;">Add</button>
          </div>
          
          <textarea id="game-code" placeholder="Paste full HTML game code..." rows="6"></textarea>
          <button id="add-game-btn">Add Game</button>
        </div>
        
        <div class="admin-section">
          <h3>Game Management</h3>
          <button id="edit-games-btn">Edit/Delete Games</button>
          <button id="refresh-games-btn">Refresh Games List</button>
          <button id="export-games-btn">Export Games Data</button>
          <button id="test-connection-btn">Test Database Connection</button>
        </div>
        
        <div class="admin-section" id="edit-games-section" style="display: none;">
          <h3>Edit/Delete Games</h3>
          <select id="game-select" style="width: 100%; padding: 8px; background: #000; color: var(--accent); border: 2px solid var(--accent); border-radius: 4px; margin-bottom: 10px;">
            <option value="">Select a game to edit...</option>
          </select>
          <div id="edit-form" style="display: none;">
            <input id="edit-game-name" placeholder="Game Name" />
            <select id="edit-game-category-select" multiple size="4" style="width:100%; margin-top:8px; background:#000; color:var(--accent); border:2px solid var(--accent); border-radius:4px; font-family:'Courier New', monospace; padding:8px;">
            </select>
            <textarea id="edit-game-code" placeholder="Game Code..." rows="4"></textarea>
            <div style="display: flex; gap: 10px; margin-top: 10px;">
              <button id="update-game-btn">Update Game</button>
              <button id="delete-game-btn" style="background: #330000 !important; border-color: #ff3333 !important; color: #ff3333 !important;">Delete Game</button>
              <button id="cancel-edit-btn">Cancel</button>
            </div>
          </div>
        </div>
        
        <div class="admin-section">
          <button id="close-admin-btn">Close Admin Panel</button>
        </div>
      </div>
    </div>
  </div>
<!-- Delete Confirmation Modal -->
<div id="delete-confirmation-modal" style="display:none; position: fixed; top:0; left:0; width:100%; height:100%; background: rgba(0,0,0,0.8); 
    justify-content: center; align-items: center; z-index: 11000;">
  <div style="background: #001100; border: 2px solid var(--accent); border-radius: 8px; padding: 20px; width: 320px; text-align: center; box-shadow: 0 0 20px var(--accent);">
    <p style="color:var(--accent); font-size: 18px; margin-bottom: 20px;" id="delete-confirm-message">Are you sure you want to delete this game?</p>
    <button id="confirm-delete-btn" style="margin-right: 10px; background:#330000; border-color:#ff3333; color:#ff3333; padding: 8px 15px; border-radius:4px; cursor:pointer;">Delete</button>
    <button id="cancel-delete-btn" style="background:#003300; border-color:var(--accent); color:var(--accent); padding: 8px 15px; border-radius:4px; cursor:pointer;">Cancel</button>
  </div>
</div>

  <!-- Settings overlay & panel -->
  <div id="settings-overlay"></div>
  
  <aside id="settings-panel" aria-hidden="true">
    <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px;">
      <h2>Themes & Appearance</h2>
      <button id="close-settings" style="background:#330000;border:2px solid #ff3333;color:#ff3333;padding:6px;border-radius:6px">Close</button>
    </div>

    <div class="settings-section" id="theme-section">
      <div class="label">Pick a theme</div>
      <div class="swatches">
        <div class="swatch" data-theme="matrix" id="swatch-matrix" title="Matrix">0s/1s</div>
        <div class="swatch" data-theme="crt" id="swatch-crt" title="CRT Retro">CRT</div>
        <div class="swatch" data-theme="neon" id="swatch-neon" title="Neon Cyberpunk">NEON</div>
        <div class="swatch" data-theme="pixel" id="swatch-pixel" title="Arcade Pixel">PIX</div>
        <div class="swatch" data-theme="stealth" id="swatch-stealth" title="Stealth">STEALTH</div>
        <div class="swatch" data-theme="dynamic" id="swatch-dynamic" title="Dynamic Wallpaper">DYN</div>
      </div>

      <div id="matrix-controls" style="margin-top:10px;display:none">
        <div class="label">Matrix speed</div>
        <input type="range" id="matrix-speed" min="1" max="12" value="6" />
        <div style="height:6px"></div>
        <div class="label">Matrix color</div>
        <input type="color" id="matrix-color" value="#33ff33" />
      </div>
    </div>

    <div class="settings-section">
      <div class="label">UI Controls</div>
      <div style="margin-bottom:8px">Card size</div>
      <div class="row" style="margin-bottom:8px">
        <select id="card-size">
          <option value="small">Small</option>
          <option value="medium" selected>Medium</option>
          <option value="large">Large</option>
        </select>
        <label style="margin-left:auto; color:var(--muted)"><input type="checkbox" id="toggle-animations" checked/> Animations</label>
      </div>
    </div>

    <div class="settings-section">
      <div class="label">Sound & Music</div>
      <label><input type="checkbox" id="toggle-sfx" checked/> UI sound effects</label><br/>
      <label style="display:block;margin-top:8px">Background music: <select id="bg-music"><option value="none">None</option><option value="ambient1">Ambient 1</option><option value="ambient2">Ambient 2</option></select></label>
      <div id="music-status" style="color:var(--muted);font-size:12px;margin-top:8px">Music plays only when no game iframe is active.</div>
    </div>

    <div class="settings-section">
      <div class="label">Gameplay Features</div>
      <label><input type="checkbox" id="show-favorites" checked/> Show favorites section</label><br/>
      <label><input type="checkbox" id="show-recent" checked/> Show recently played</label><br/>
      <label><input type="checkbox" id="track-playtime" checked/> Track play time & counts</label>
      <div style="margin-top:8px;">
        <button id="clear-recent-btn" style="font-size:12px;padding:4px 8px;">Clear Recent</button>
        <button id="clear-favorites-btn" style="font-size:12px;padding:4px 8px;">Clear Favorites</button>
      </div>
    </div>
    
    <div class="settings-section">
      <div class="label">Performance & Cache</div>
      <label><input type="checkbox" id="offline-mode" /> Enable offline mode</label><br/>
      <label><input type="checkbox" id="preload-games" /> Preload selected games</label>
      <div style="margin-top:8px;color:var(--muted);font-size:12px;">
        <div>Cache status: <span id="cache-status">Not cached</span></div>
        <button id="clear-cache-btn" style="font-size:12px;padding:4px 8px;margin-top:4px;">Clear Cache</button>
      </div>
    </div>

    <div class="settings-section">
      <div class="label">Persistence</div>
      <div id="pref-save-status" style="color:var(--muted)">Loading preference status...</div>
    </div>
  </aside>

  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js"></script>
  <script>
    // ---- Supabase client ----
    const SUPABASE_URL = 'https://pdqddhumgcjpzxjmzval.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBkcWRkaHVtZ2NqcHp4am16dmFsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxNzk5ODMsImV4cCI6MjA2NTc1NTk4M30.cYVCjH960p_zBqLN7zhWpK8XI0s8PrZJwP5UL0lWEr4';
    const client = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // ---- DOM refs (original + settings) ----
    const gameListDiv = document.getElementById('game-list');
    const codeInput = document.getElementById('code-input');
    const runBtn = document.getElementById('run-btn');
    const runNewTabBtn = document.getElementById('run-newtab-btn');
    const previewContainer = document.getElementById('preview-container');
    const fullscreenBtn = document.getElementById('fullscreen-btn');
    const exitFullscreenBtn = document.getElementById('exit-fullscreen-btn');
    const searchInput = document.getElementById('search-input');
    const categoryButtonsContainer = document.getElementById('category-buttons');
    const adminPanel = document.getElementById('admin-panel');
    const gameNameInput = document.getElementById('game-name');
    const gameCategorySelect = document.getElementById('game-category-select');
    const gameCodeInput = document.getElementById('game-code');
    const addGameBtn = document.getElementById('add-game-btn');
    const closeAdminBtn = document.getElementById('close-admin-btn');
    const refreshGamesBtn = document.getElementById('refresh-games-btn');
    const exportGamesBtn = document.getElementById('export-games-btn');
    const testConnectionBtn = document.getElementById('test-connection-btn');
    const editGamesBtn = document.getElementById('edit-games-btn');
    const editGamesSection = document.getElementById('edit-games-section');
    const gameSelect = document.getElementById('game-select');
    const editForm = document.getElementById('edit-form');
    const editGameName = document.getElementById('edit-game-name');
    const editGameCategorySelect = document.getElementById('edit-game-category-select');
    const editGameCode = document.getElementById('edit-game-code');
    const updateGameBtn = document.getElementById('update-game-btn');
    const deleteGameBtn = document.getElementById('delete-game-btn');
    const cancelEditBtn = document.getElementById('cancel-edit-btn');
    const passwordModal = document.getElementById('password-modal');
    const passwordInput = document.getElementById('admin-password-input');

    const showAddCategoryBtn = document.getElementById('show-add-category-btn');
    const newCategoryContainer = document.getElementById('new-category-container');
    const newCategoryInput = document.getElementById('new-category-input');
    const addCategoryBtn = document.getElementById('add-category-btn');

    // Settings DOM
    const settingsBtn = document.getElementById('settings-btn');
    const settingsOverlay = document.getElementById('settings-overlay');
    const settingsPanel = document.getElementById('settings-panel');
    const closeSettings = document.getElementById('close-settings');
    const swatches = document.querySelectorAll('.swatch');
    const matrixControls = document.getElementById('matrix-controls');
    const matrixSpeed = document.getElementById('matrix-speed');
    const matrixColor = document.getElementById('matrix-color');
    const cardSize = document.getElementById('card-size');
    const toggleAnimations = document.getElementById('toggle-animations');
    const toggleSfx = document.getElementById('toggle-sfx');
    const bgMusicSelect = document.getElementById('bg-music');
    const prefSaveStatus = document.getElementById('pref-save-status');
    
    // New gameplay feature DOM refs
    const favoritesSection = document.getElementById('favorites-section');
    const favoritesList = document.getElementById('favorites-list');
    const favoritesCount = document.getElementById('favorites-count');
    const recentSection = document.getElementById('recent-section');
    const recentList = document.getElementById('recent-list');
    const recentCount = document.getElementById('recent-count');
    const sessionInfo = document.getElementById('session-info');
    const sessionGame = document.getElementById('session-game');
    const sessionTime = document.getElementById('session-time');
    const showFavorites = document.getElementById('show-favorites');
    const showRecent = document.getElementById('show-recent');
    const trackPlaytime = document.getElementById('track-playtime');
    const clearRecentBtn = document.getElementById('clear-recent-btn');
    const clearFavoritesBtn = document.getElementById('clear-favorites-btn');
    const offlineMode = document.getElementById('offline-mode');
    const preloadGames = document.getElementById('preload-games');
    const cacheStatus = document.getElementById('cache-status');
    const clearCacheBtn = document.getElementById('clear-cache-btn');
    
    // Login DOM refs
    const loginBtn = document.getElementById('login-btn');
    const loginModal = document.getElementById('login-modal');
    const loginForm = document.getElementById('login-form');
    const loginEmail = document.getElementById('login-email');
    const loginPassword = document.getElementById('login-password');
    const loginSubmitBtn = document.getElementById('login-submit-btn');
    const signupBtn = document.getElementById('signup-btn');
    const loginCancelBtn = document.getElementById('login-cancel-btn');
    const loginStatus = document.getElementById('login-status');
    const userInfo = document.getElementById('user-info');
    const userName = document.getElementById('user-name');
    const logoutBtn = document.getElementById('logout-btn');

    let allGames = [];

    // --- Helpers to normalize category storage (comma-separated in DB) ---
    function splitCategories(raw) {
      if (!raw) return [];
      if (Array.isArray(raw)) return raw.map(s => String(s).trim()).filter(Boolean);
      return String(raw).split(',').map(s => s.trim()).filter(Boolean);
    }
    function joinCategories(arr) {
      if (!arr || arr.length === 0) return null;
      return arr.join(',');
    }

    // Test Supabase connection
    async function testConnection() {
      try {
        console.log('Testing Supabase connection...');
        console.log('Supabase URL:', SUPABASE_URL);
        console.log('Using table: Files');
        
        const { data, error } = await client.from('Files').select('*').limit(1);
        if (error) {
          console.error('Connection test failed:', error);
          return false;
        }
        console.log('Connection test successful!', data);
        return true;
      } catch (err) {
        console.error('Connection test error:', err);
        return false;
      }
    }

    async function loadGames() {
      try {
        console.log('Loading games from Supabase...');
        const { data, error } = await client.from('Files').select('*');
        
        if (error) {
          console.error('Supabase error:', error);
          gameListDiv.innerHTML = `<div style="color: #ff3333;">Failed to load games: ${error.message}</div>`;
          return;
        }
        
        console.log('Games loaded:', data);
        allGames = data ? data.sort((a, b) => (a.Name || '').localeCompare(b.Name || '')) : [];
        populateCategories();
        populateGameSelect();
        renderGameList(allGames);
        updateFavoritesDisplay();
        updateRecentDisplay();
        
      } catch (err) {
        console.error('Network error:', err);
        gameListDiv.innerHTML = `<div style="color: #ff3333;">Network error: ${err.message}</div>`;
      }
    }

    function renderGameList(games) {
      gameListDiv.innerHTML = '';
      if (!games || games.length === 0) {
        gameListDiv.innerHTML = '<div style="color: var(--accent); text-align: center; padding: 20px; grid-column: 1 / -1;">No games found.</div>';
        return;
      }
      
      games.forEach(game => {
        const button = createGameButton(game);
        gameListDiv.appendChild(button);
      });
    }
    
    function updateGameButtons() {
      // Re-render current games to update favorite stars
      const activeCategory = document.querySelector('.category-btn.active')?.dataset.category || '';
      const filteredGames = (activeCategory === '') ? allGames : allGames.filter(game => {
        const parts = splitCategories(game.Category);
        return parts.includes(activeCategory);
      });
      renderGameList(filteredGames);
      updateFavoritesDisplay();
      updateRecentDisplay();
    }

    function populateCategories() {
      const set = new Set();
      allGames.forEach(g => {
        const parts = splitCategories(g.Category);
        parts.forEach(p => set.add(p));
      });

      const categories = Array.from(set).sort((a,b) => a.localeCompare(b));

      // Populate add-game select
      const placeholder = gameCategorySelect.querySelector('option[value=""]');
      gameCategorySelect.innerHTML = '';
      if (placeholder) gameCategorySelect.appendChild(placeholder);
      categories.forEach(cat => {
        const opt = document.createElement('option');
        opt.value = cat;
        opt.textContent = cat;
        gameCategorySelect.appendChild(opt);
      });

      // Populate edit-game select
      editGameCategorySelect.innerHTML = '';
      categories.forEach(cat => {
        const opt = document.createElement('option');
        opt.value = cat;
        opt.textContent = cat;
        editGameCategorySelect.appendChild(opt);
      });

      // Ensure category buttons include these (don't duplicate hardcoded ones)
      const existingBtnCats = Array.from(categoryButtonsContainer.querySelectorAll('.category-btn')).map(b => b.dataset.category);
      categories.forEach(cat => {
        if (!existingBtnCats.includes(cat)) {
          const btn = document.createElement('button');
          btn.className = 'category-btn';
          btn.dataset.category = cat;
          btn.textContent = cat;
          categoryButtonsContainer.appendChild(btn);
        }
      });
    }
    
    function filterByCategory(category, buttonElement) {
      document.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('active'));
      if (buttonElement) buttonElement.classList.add('active');

      const filteredGames = (category === '') ? allGames : allGames.filter(game => {
        const parts = splitCategories(game.Category);
        return parts.includes(category);
      });
      renderGameList(filteredGames);
    }
    
    function populateGameSelect() {
      gameSelect.innerHTML = '<option value="">Select a game to edit...</option>';
      allGames.forEach(game => {
        const option = document.createElement('option');
        option.value = game.id;
        option.textContent = game.Name;
        gameSelect.appendChild(option);
      });
    }
    
    function loadGameForEdit(gameId) {
      const game = allGames.find(g => g.id == gameId);
      if (game) {
        editGameName.value = game.Name || '';
        const cats = splitCategories(game.Category);
        Array.from(editGameCategorySelect.options).forEach(opt => { opt.selected = cats.includes(opt.value); });
        editGameCode.value = game.Code || '';
        editForm.style.display = 'block';
      }
    }
    
    async function updateGame() {
      const gameId = gameSelect.value;
      const Name = editGameName.value.trim();
      const Code = editGameCode.value.trim();
      const CategoryArray = Array.from(editGameCategorySelect.selectedOptions).map(o => o.value).filter(Boolean);
      const Category = joinCategories(CategoryArray);
      
      if (!gameId) {
        alert('No game selected.');
        return;
      }
      if (!Name || !Code) {
        alert('Please fill in all required fields (Name and Code).');
        return;
      }
      
      const { error } = await client
        .from('Files')
        .update({ Name, Code, Category })
        .eq('id', gameId);
        
      if (error) {
        console.error('Error updating game:', error);
        alert('Error updating game: ' + error.message);
        return;
      }
      
      alert('Game updated successfully!');
      editForm.style.display = 'none';
      editGamesSection.style.display = 'none';
      gameSelect.value = '';
      await loadGames();
    }
    
    async function deleteGame() {
      const gameId = gameSelect.value;
      const gameName = allGames.find(g => g.id == gameId)?.Name;
      
      if (!confirm(`Are you sure you want to delete "${gameName}"? This cannot be undone.`)) {
        return;
      }
      
      const { error } = await client
        .from('Files')
        .delete()
        .eq('id', gameId);
        
      if (error) {
        console.error('Error deleting game:', error);
        alert('Error deleting game: ' + error.message);
        return;
      }
      
      alert('Game deleted successfully!');
      editForm.style.display = 'none';
      editGamesSection.style.display = 'none';
      gameSelect.value = '';
      await loadGames();
    }

    function runCode() {
      console.log('runCode function called');
      const code = codeInput.value.trim();
      
      if (!code) {
        console.log('No code to run');
        alert('Please paste some game code first!');
        return;
      }
      
      try {
        // Remove existing iframes
        previewContainer.querySelectorAll('iframe').forEach(e => e.remove());
        
        // Create new iframe
        const iframe = document.createElement('iframe');
        iframe.sandbox = 'allow-scripts allow-same-origin allow-forms allow-popups';
        iframe.style.cssText = 'width:100%;height:100%;border:none;border-radius:6px;background:#000;';
        
        // Add iframe to container
        previewContainer.appendChild(iframe);
        
        // Wait for iframe to be ready then write content
        setTimeout(() => {
          try {
            const doc = iframe.contentDocument || iframe.contentWindow.document;
            doc.open();
            doc.write(code);
            doc.close();
            console.log('Code executed successfully');
          } catch (error) {
            console.error('Error writing to iframe:', error);
            alert('Error running game: ' + error.message);
          }
        }, 50);
        
      } catch (error) {
        console.error('Error in runCode:', error);
        alert('Error running game: ' + error.message);
      }
    }

    // Fix run button - ensure it works correctly
    runBtn.addEventListener('click', (e) => {
      console.log('Run button clicked');
      e.preventDefault();
      runCode();
    });
    
    runNewTabBtn.addEventListener('click', (e) => {
      console.log('Run in new tab clicked');
      e.preventDefault();
      const newTab = window.open();
      newTab.document.write(codeInput.value);
      newTab.document.close();
    });

    let isFullscreen = false;
    let originalStyles = {};

    // Fix fullscreen button
    fullscreenBtn.addEventListener('click', (e) => {
      console.log('Fullscreen button clicked');
      e.preventDefault();
      e.stopPropagation();
      enterFullscreen();
    });
    
    exitFullscreenBtn.addEventListener('click', (e) => {
      console.log('Exit fullscreen button clicked');
      e.preventDefault();
      e.stopPropagation();
      exitFullscreen();
    });

    function enterFullscreen() {
      console.log('Entering fullscreen');
      const iframe = previewContainer.querySelector('iframe');
      if (!iframe) {
        console.log('No iframe found for fullscreen');
        return;
      }

  // Save styles
  originalStyles = {
    position: iframe.style.position,
    top: iframe.style.top,
    left: iframe.style.left,
    width: iframe.style.width,
    height: iframe.style.height,
    zIndex: iframe.style.zIndex,
    background: iframe.style.background
  };

  // Apply fake fullscreen
  iframe.style.position = 'fixed';
  iframe.style.top = '0';
  iframe.style.left = '0';
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.zIndex = '9999';
  iframe.style.background = '#000';

  document.body.style.overflow = 'hidden';
  document.documentElement.style.overflow = 'hidden';

  exitFullscreenBtn.style.display = 'block';
  isFullscreen = true;
}

function exitFullscreen() {
  const iframe = previewContainer.querySelector('iframe');
  if (!iframe) return;

  // Restore styles
  for (let key in originalStyles) {
    iframe.style[key] = originalStyles[key];
  }

  document.body.style.overflow = '';
  document.documentElement.style.overflow = '';

  exitFullscreenBtn.style.display = 'none';
  isFullscreen = false;
}


document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape' && isFullscreen) {
    exitFullscreen();
  }
});

    addGameBtn.addEventListener('click', async () => {
      const Name = gameNameInput.value.trim();
      const Code = gameCodeInput.value.trim();
      const CategoryArray = Array.from(gameCategorySelect.selectedOptions).map(o => o.value).filter(Boolean);
      const Category = joinCategories(CategoryArray);

      if (!Name || !Code) {
        alert('Please fill in all required fields (Name and Code).');
        return;
      }
      
      // Disable button to prevent double-clicks
      addGameBtn.disabled = true;
      addGameBtn.textContent = 'Adding...';
      
      try {
        const { data, error } = await client
          .from('Files')
          .insert([{ Name, Code, Category }])
          .select();
          
        if (error) {
          console.error('Error adding game:', error);
          alert('Error saving game: ' + error.message);
          return;
        }
        
        alert('Game added successfully!');
        gameNameInput.value = '';
        Array.from(gameCategorySelect.options).forEach(opt => opt.selected = false);
        gameCodeInput.value = '';

        await loadGames();
        
      } catch (err) {
        console.error('Unexpected error:', err);
        alert('An unexpected error occurred. Please try again.');
      } finally {
        // Re-enable button
        addGameBtn.disabled = false;
        addGameBtn.textContent = 'Add Game';
      }
    });

    // Use event delegation for category-buttons so dynamically added ones just work
    categoryButtonsContainer.addEventListener('click', (e) => {
      const btn = e.target.closest('.category-btn');
      if (!btn) return;
      filterByCategory(btn.dataset.category, btn);
    });

    // Search functionality
    searchInput.addEventListener('input', filterGames);

    function filterGames() {
      const term = searchInput.value.toLowerCase();
      const activeCategory = document.querySelector('.category-btn.active')?.dataset.category || '';
      const filtered = allGames.filter(g => {
        const nameMatch = (g.Name || '').toLowerCase().includes(term);
        const categoryMatch = !activeCategory || splitCategories(g.Category).includes(activeCategory);
        return nameMatch && categoryMatch;
      });
      renderGameList(filtered);
    }
    
    // Admin panel event listeners
    closeAdminBtn.addEventListener('click', () => {
      adminPanel.style.display = 'none';
    });
    
    refreshGamesBtn.addEventListener('click', loadGames);
    
    testConnectionBtn.addEventListener('click', async () => {
      console.log('Manual connection test triggered...');
      const result = await testConnection();
      if (result) {
        alert('✅ Database connection successful! Check console for details.');
      } else {
        alert('❌ Database connection failed! Check console for error details.');
      }
    });
    
    exportGamesBtn.addEventListener('click', () => {
      const dataStr = JSON.stringify(allGames, null, 2);
      const dataBlob = new Blob([dataStr], {type: 'application/json'});
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = 'games_export.json';
      link.click();
      URL.revokeObjectURL(url);
    });
    
    // Edit/Delete functionality
    editGamesBtn.addEventListener('click', () => {
      editGamesSection.style.display = editGamesSection.style.display === 'none' ? 'block' : 'none';
      editForm.style.display = 'none';
      gameSelect.value = '';
    });
    
    gameSelect.addEventListener('change', (e) => {
      if (e.target.value) {
        loadGameForEdit(e.target.value);
      } else {
        editForm.style.display = 'none';
      }
    });
    
    updateGameBtn.addEventListener('click', updateGame);
    
    cancelEditBtn.addEventListener('click', () => {
      editForm.style.display = 'none';
      gameSelect.value = '';
    });

    const deleteConfirmationModal = document.getElementById('delete-confirmation-modal');
const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
const deleteConfirmMessage = document.getElementById('delete-confirm-message');

let gameIdToDelete = null;

deleteGameBtn.addEventListener('click', () => {
  const selectedId = gameSelect.value;
  if (!selectedId) {
    alert('Please select a game to delete.');
    return;
  }
  const gameName = allGames.find(g => g.id == selectedId)?.Name || 'this game';
  deleteConfirmMessage.textContent = `Are you sure you want to delete "${gameName}"? This action cannot be undone.`;
  gameIdToDelete = selectedId;
  deleteConfirmationModal.style.display = 'flex';
});

confirmDeleteBtn.addEventListener('click', async () => {
  if (!gameIdToDelete) return;
  try {
    const { error } = await client.from('Files').delete().eq('id', gameIdToDelete);
    if (error) {
      console.error('Error deleting game:', error);
      alert('Error deleting game: ' + error.message);
      return;
    }
    alert('Game deleted successfully!');
    gameIdToDelete = null;
    deleteConfirmationModal.style.display = 'none';
    editForm.style.display = 'none';
    editGamesSection.style.display = 'none';
    gameSelect.value = '';
    await loadGames();
  } catch (err) {
    console.error('Unexpected error:', err);
    alert('An unexpected error occurred. Please try again.');
  }
});

cancelDeleteBtn.addEventListener('click', () => {
  gameIdToDelete = null;
  deleteConfirmationModal.style.display = 'none';
});

    // Close admin panel when clicking outside
    adminPanel.addEventListener('click', (e) => {
      if (e.target === adminPanel) {
        adminPanel.style.display = 'none';
      }
    });

    document.addEventListener('keydown', e => {
      if (e.ctrlKey && e.shiftKey && e.altKey && e.key.toLowerCase() === 'l') {
        passwordModal.style.display = 'block';
        passwordInput.focus();
      }
    });

    passwordInput.addEventListener('keydown', e => {
      if (e.key === 'Enter') {
        if (passwordInput.value === 'AudreyLane') {
          passwordModal.style.display = 'none';
          adminPanel.style.display = 'flex';
        } else {
          alert('Incorrect password.');
          passwordInput.value = '';
        }
      }
    });

    // ---- Matrix background (integrated with preferences) ----
    const canvas = document.getElementById('matrix-bg');
    const ctx = canvas.getContext('2d');
    let fontSize = 14;
    let columns = 0; let drops = [];

    function resizeCanvas(){
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      columns = Math.floor(canvas.width / fontSize);
      drops = Array(columns).fill(1);
    }

    function drawMatrix(){
      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--matrix-color') || '#33ff33';
      ctx.font = fontSize + 'px Courier New';
      for(let i=0;i<drops.length;i++){
        const text = Math.random() > 0.5 ? '1' : '0';
        const x = i * fontSize;
        const y = drops[i] * fontSize;
        ctx.fillText(text, x, y);
        if(y > canvas.height && Math.random() > 0.975) drops[i] = 0; else drops[i]++;
      }
    }

    let matrixInterval = null;
    function resetMatrixInterval(){
      if(matrixInterval) clearInterval(matrixInterval);
      const speed = Math.max(1, Math.min(12, preferences.matrixSpeed || 6));
      const ms = Math.round(140 - (speed * 9));
      matrixInterval = setInterval(drawMatrix, ms);
    }

    window.addEventListener('resize', () => { resizeCanvas(); });

    // ---- Initialization flow ----
    async function initApp() {
      console.log('Initializing app...');
      const connectionOk = await testConnection();
      if (connectionOk) {
        await loadGames();
      } else {
        gameListDiv.innerHTML = '<div style="color: #ff3333; text-align: center; padding: 20px;">⚠️ Database connection failed. Check console for details.</div>';
      }
    }

    // =========== Settings/preferences system ===========
    let preferences = {
      theme: 'matrix',
      matrixSpeed: 6,
      matrixColor: '#33ff33',
      cardSize: 'medium',
      animations: true,
      sfx: true,
      bgMusic: 'none',
      showFavorites: true,
      showRecent: true,
      trackPlaytime: true,
      offlineMode: false,
      preloadGames: false
    };
    let currentUserId = null;
    
    // =========== Gameplay data ===========
    let favorites = new Set();
    let recentGames = [];
    let gameStats = {}; // { gameId: { playCount: 0, totalTime: 0 } }
    let currentSession = { gameId: null, startTime: null };
    let sessionTimer = null;
    
    // =========== Sound Effects ===========
    const sounds = {
      click: () => playTone(400, 0.1, 0.02),
      hover: () => playTone(200, 0.02, 0.002),
      success: () => playTone(1000, 0.2, 0.1),
      error: () => playTone(400, 0.3, 0.15)
    };
    
    function playTone(frequency, duration, volume = 0.1) {
      if (!preferences.sfx) return;
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.value = frequency;
      oscillator.type = 'square';
      
      gainNode.gain.setValueAtTime(0, audioContext.currentTime);
      gainNode.gain.linearRampToValueAtTime(volume, audioContext.currentTime + 0.01);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + duration);
    }
    
    // =========== Favorites System ===========
    function toggleFavorite(gameId) {
      if (favorites.has(gameId)) {
        favorites.delete(gameId);
        sounds.click();
      } else {
        favorites.add(gameId);
        sounds.success();
      }
      saveFavorites();
      updateFavoritesDisplay();
      updateGameButtons();
    }
    
    function saveFavorites() {
      localStorage.setItem('game_favorites', JSON.stringify([...favorites]));
    }
    
    function loadFavorites() {
      try {
        const saved = localStorage.getItem('game_favorites');
        if (saved) {
          favorites = new Set(JSON.parse(saved));
        }
      } catch (e) {
        console.warn('Failed to load favorites:', e);
      }
    }
    
    function updateFavoritesDisplay() {
      const favGames = allGames.filter(g => favorites.has(g.id));
      favoritesCount.textContent = `(${favGames.length})`;
      
      if (preferences.showFavorites && favGames.length > 0) {
        favoritesSection.style.display = 'block';
        favoritesList.innerHTML = '';
        favGames.forEach(game => {
          const btn = createGameButton(game, true);
          favoritesList.appendChild(btn);
        });
      } else {
        favoritesSection.style.display = 'none';
      }
    }
    
    // =========== Recent Games System ===========
    function addToRecent(gameId) {
      if (!preferences.trackPlaytime) return;
      
      // Remove if already exists
      recentGames = recentGames.filter(id => id !== gameId);
      // Add to front
      recentGames.unshift(gameId);
      // Keep only last 8
      recentGames = recentGames.slice(0, 8);
      
      saveRecentGames();
      updateRecentDisplay();
    }
    
    function saveRecentGames() {
      localStorage.setItem('recent_games', JSON.stringify(recentGames));
    }
    
    function loadRecentGames() {
      try {
        const saved = localStorage.getItem('recent_games');
        if (saved) {
          recentGames = JSON.parse(saved);
        }
      } catch (e) {
        console.warn('Failed to load recent games:', e);
      }
    }
    
    function updateRecentDisplay() {
      const recentGameData = recentGames.map(id => allGames.find(g => g.id === id)).filter(Boolean);
      recentCount.textContent = `(${recentGameData.length})`;
      
      if (preferences.showRecent && recentGameData.length > 0) {
        recentSection.style.display = 'block';
        recentList.innerHTML = '';
        recentGameData.forEach(game => {
          const btn = createGameButton(game, true);
          btn.style.opacity = '0.8';
          recentList.appendChild(btn);
        });
      } else {
        recentSection.style.display = 'none';
      }
    }
    
    // =========== Session Tracking ===========
    function startSession(gameId, gameName) {
      if (!preferences.trackPlaytime) return;
      
      // End previous session
      endSession();
      
      currentSession = { gameId, startTime: Date.now() };
      sessionGame.textContent = gameName || 'Unknown Game';
      sessionInfo.style.display = 'block';
      
      sessionTimer = setInterval(updateSessionDisplay, 1000);
      addToRecent(gameId);
    }
    
    function endSession() {
      if (currentSession.gameId && currentSession.startTime) {
        const duration = Date.now() - currentSession.startTime;
        updateGameStats(currentSession.gameId, duration);
      }
      
      currentSession = { gameId: null, startTime: null };
      sessionInfo.style.display = 'none';
      
      if (sessionTimer) {
        clearInterval(sessionTimer);
        sessionTimer = null;
      }
    }
    
    function updateSessionDisplay() {
      if (!currentSession.startTime) return;
      
      const elapsed = Date.now() - currentSession.startTime;
      const hours = Math.floor(elapsed / 3600000);
      const minutes = Math.floor((elapsed % 3600000) / 60000);
      const seconds = Math.floor((elapsed % 60000) / 1000);
      
      sessionTime.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    function updateGameStats(gameId, duration) {
      if (!gameStats[gameId]) {
        gameStats[gameId] = { playCount: 0, totalTime: 0 };
      }
      
      gameStats[gameId].playCount++;
      gameStats[gameId].totalTime += duration;
      
      saveGameStats();
    }
    
    function saveGameStats() {
      localStorage.setItem('game_stats', JSON.stringify(gameStats));
    }
    
    function loadGameStats() {
      try {
        const saved = localStorage.getItem('game_stats');
        if (saved) {
          gameStats = JSON.parse(saved);
        }
      } catch (e) {
        console.warn('Failed to load game stats:', e);
      }
    }
    
    // =========== Login System ===========
    async function showLoginModal() {
      loginModal.style.display = 'flex';
      loginEmail.focus();
      loginStatus.textContent = '';
    }
    
    async function hideLoginModal() {
      loginModal.style.display = 'none';
      loginEmail.value = '';
      loginPassword.value = '';
      loginStatus.textContent = '';
    }
    
    async function handleLogin() {
      const email = loginEmail.value.trim();
      const password = loginPassword.value;
      
      if (!email || !password) {
        loginStatus.textContent = 'Please enter both email and password.';
        loginStatus.style.color = '#ff3333';
        return;
      }
      
      loginStatus.textContent = 'Signing in...';
      loginStatus.style.color = 'var(--muted)';
      
      try {
        const { data, error } = await client.auth.signInWithPassword({
          email: email,
          password: password
        });
        
        if (error) {
          throw error;
        }
        
        loginStatus.textContent = 'Login successful!';
        loginStatus.style.color = 'var(--accent)';
        
        updateUserInterface(data.user);
        hideLoginModal();
        await loadPreferences(); // Reload preferences from cloud
        
      } catch (error) {
        console.error('Login error:', error);
        loginStatus.textContent = error.message || 'Login failed. Please try again.';
        loginStatus.style.color = '#ff3333';
      }
    }
    
    async function handleSignup() {
      const email = loginEmail.value.trim();
      const password = loginPassword.value;
      
      if (!email || !password) {
        loginStatus.textContent = 'Please enter both email and password.';
        loginStatus.style.color = '#ff3333';
        return;
      }
      
      if (password.length < 6) {
        loginStatus.textContent = 'Password must be at least 6 characters.';
        loginStatus.style.color = '#ff3333';
        return;
      }
      
      loginStatus.textContent = 'Creating account...';
      loginStatus.style.color = 'var(--muted)';
      
      try {
        const { data, error } = await client.auth.signUp({
          email: email,
          password: password
        });
        
        if (error) {
          throw error;
        }
        
        loginStatus.textContent = 'Account created! Check your email to verify.';
        loginStatus.style.color = 'var(--accent)';
        
        if (data.user) {
          updateUserInterface(data.user);
          hideLoginModal();
        }
        
      } catch (error) {
        console.error('Signup error:', error);
        loginStatus.textContent = error.message || 'Signup failed. Please try again.';
        loginStatus.style.color = '#ff3333';
      }
    }
    
    async function handleLogout() {
      try {
        const { error } = await client.auth.signOut();
        if (error) throw error;
        
        updateUserInterface(null);
        currentUserId = null;
        
      } catch (error) {
        console.error('Logout error:', error);
        alert('Logout failed: ' + error.message);
      }
    }
    
    function updateUserInterface(user) {
      if (user) {
        loginBtn.style.display = 'none';
        userInfo.style.display = 'flex';
        userName.textContent = user.email || 'User';
      } else {
        loginBtn.style.display = 'block';
        userInfo.style.display = 'none';
        userName.textContent = '';
      }
    }
    
    // =========== Enhanced Game Button Creation ===========
    function createGameButton(game, isCompact = false) {
      const button = document.createElement('button');
      button.className = 'game-button';
      button.style.position = 'relative';
      
      const stats = gameStats[game.id];
      const isFavorite = favorites.has(game.id);
      
      let innerHTML = game.Name || 'Untitled';
      
      if (stats && preferences.trackPlaytime && !isCompact) {
        const hours = Math.floor(stats.totalTime / 3600000);
        const minutes = Math.floor((stats.totalTime % 3600000) / 60000);
        const plays = stats.playCount;
        let timeStr = '';
        if (hours > 0) timeStr = `${hours}h`;
        else if (minutes > 0) timeStr = `${minutes}m`;
        
        innerHTML += `<div style="font-size:10px;color:var(--muted);margin-top:4px;">
          ${plays} plays${timeStr ? `, ${timeStr}` : ''}
        </div>`;
      }
      
      button.innerHTML = innerHTML;
      
      // Add favorite star
      const star = document.createElement('button');
      star.innerHTML = isFavorite ? '★' : '☆';
      star.className = 'favorite-btn';
      star.style.cssText = `
        position:absolute; top:4px; right:4px; background:none; border:none; 
        color:${isFavorite ? '#ffff00' : 'var(--muted)'}; font-size:16px; cursor:pointer;
        padding:2px; transition:color 0.2s ease; z-index:2;
      `;
      
      star.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleFavorite(game.id);
        sounds.click();
      });
      
      button.appendChild(star);
      
      button.addEventListener('mouseenter', () => sounds.hover());
      
      button.addEventListener('click', () => {
        console.log('Game button clicked:', game.Name);
        codeInput.value = game.Code || '';
        runCode();
        startSession(game.id, game.Name);
        sounds.success();
      });
      
      return button;
    }

    async function loadPreferences(){
      try{
        const { data: authData } = await client.auth.getUser();
        currentUserId = authData?.user?.id || null;
      }catch(e){ console.warn('Auth fetch failed', e); currentUserId = null; }

      if(currentUserId){
        try{
          const { data, error } = await client.from('user_preferences').select('*').eq('user_id', currentUserId).single();
          if(error){ console.log('No remote prefs row (or error):', error?.message); loadPrefsFromLocal(); }
          else if(data){
            preferences = Object.assign(preferences, {
              theme: data.theme || preferences.theme,
              matrixSpeed: data.matrix_speed || preferences.matrixSpeed,
              matrixColor: data.matrix_color || preferences.matrixColor,
              cardSize: data.card_size || preferences.cardSize,
              animations: typeof data.animations_enabled === 'boolean' ? data.animations_enabled : preferences.animations,
              sfx: typeof data.sfx_enabled === 'boolean' ? data.sfx_enabled : preferences.sfx,
              bgMusic: data.bg_music || preferences.bgMusic,
              showFavorites: typeof data.show_favorites === 'boolean' ? data.show_favorites : preferences.showFavorites,
              showRecent: typeof data.show_recent === 'boolean' ? data.show_recent : preferences.showRecent,
              trackPlaytime: typeof data.track_playtime === 'boolean' ? data.track_playtime : preferences.trackPlaytime,
              offlineMode: typeof data.offline_mode === 'boolean' ? data.offline_mode : preferences.offlineMode,
              preloadGames: typeof data.preload_games === 'boolean' ? data.preload_games : preferences.preloadGames
            });
            applyTheme(preferences);
            updatePrefStatus(true);
          }
        }catch(err){ console.error('Failed to load prefs from supabase', err); loadPrefsFromLocal(); }
      }else{
        loadPrefsFromLocal();
      }
    }

    function loadPrefsFromLocal(){
      try{
        const raw = localStorage.getItem('launcher_prefs');
        if(raw){ const obj = JSON.parse(raw); preferences = Object.assign(preferences, obj); }
      }catch(e){console.warn('local load failed', e)}
      applyTheme(preferences);
      updatePrefStatus(false);
    }

    function updatePrefStatus(savedRemote){ if(savedRemote){ prefSaveStatus.textContent = 'Preferences loaded from cloud (Supabase).'; } else prefSaveStatus.textContent = 'Using local preferences. Sign in to save to cloud.'; }

    async function savePreferences(){
      const payload = {
        theme: preferences.theme,
        matrix_speed: preferences.matrixSpeed,
        matrix_color: preferences.matrixColor,
        card_size: preferences.cardSize,
        animations_enabled: preferences.animations,
        sfx_enabled: preferences.sfx,
        bg_music: preferences.bgMusic,
        show_favorites: preferences.showFavorites,
        show_recent: preferences.showRecent,
        track_playtime: preferences.trackPlaytime,
        offline_mode: preferences.offlineMode,
        preload_games: preferences.preloadGames
      };

      if(currentUserId){
        try{
          const row = Object.assign({user_id: currentUserId}, payload);
          const { error } = await client.from('user_preferences').upsert(row, {onConflict:['user_id']});
          if(error){ console.error('Save prefs error', error); prefSaveStatus.textContent = 'Failed to save to cloud.'; }
          else prefSaveStatus.textContent = 'Preferences saved to cloud.';
        }catch(err){ console.error('Save prefs catch', err); prefSaveStatus.textContent = 'Save error.' }
      }else{
        try{ localStorage.setItem('launcher_prefs', JSON.stringify(preferences)); prefSaveStatus.textContent = 'Preferences saved locally.' }catch(e){ console.warn('local save failed', e); prefSaveStatus.textContent = 'Save failed.' }
      }
    }

    let saveTimer = null;
    function savePreferencesDebounced(){ clearTimeout(saveTimer); saveTimer = setTimeout(savePreferences, 600); }

    // Apply theme to page
    function applyTheme(prefs){
      document.documentElement.classList.remove('theme-crt','theme-neon','theme-pixel','theme-stealth');
      if(prefs.theme === 'crt') document.documentElement.classList.add('theme-crt');
      if(prefs.theme === 'neon') document.documentElement.classList.add('theme-neon');
      if(prefs.theme === 'pixel') document.documentElement.classList.add('theme-pixel');
      if(prefs.theme === 'stealth') document.documentElement.classList.add('theme-stealth');

      if(prefs.theme === 'matrix'){
        document.documentElement.style.setProperty('--matrix-color', prefs.matrixColor || '#33ff33');
        matrixColor.value = prefs.matrixColor || '#33ff33';
        matrixSpeed.value = prefs.matrixSpeed || 6;
      }

      if(prefs.animations) document.documentElement.classList.remove('no-animations'); else document.documentElement.classList.add('no-animations');

      document.documentElement.style.setProperty('--card-size', prefs.cardSize || 'medium');
      const gs = document.querySelectorAll('.game-button');
      gs.forEach(g => {
        if(prefs.cardSize === 'small'){ g.style.padding = '8px'; g.style.fontSize='12px'; }
        else if(prefs.cardSize === 'large'){ g.style.padding='20px'; g.style.fontSize='16px'; }
        else { g.style.padding='15px'; g.style.fontSize='14px'; }
      });

      bgMusicSelect.value = prefs.bgMusic || 'none';
      toggleSfx.checked = !!prefs.sfx;
      toggleAnimations.checked = !!prefs.animations;
      cardSize.value = prefs.cardSize || 'medium';
      
      // Update new gameplay controls
      showFavorites.checked = !!prefs.showFavorites;
      showRecent.checked = !!prefs.showRecent;
      trackPlaytime.checked = !!prefs.trackPlaytime;
      offlineMode.checked = !!prefs.offlineMode;
      preloadGames.checked = !!prefs.preloadGames;
    }

    // Wire controls
    matrixSpeed.addEventListener('input', (e)=>{ preferences.matrixSpeed = Number(e.target.value); applyTheme(preferences); savePreferencesDebounced(); resetMatrixInterval(); });
    matrixColor.addEventListener('input', (e)=>{ preferences.matrixColor = e.target.value; document.documentElement.style.setProperty('--matrix-color', preferences.matrixColor); applyTheme(preferences); savePreferencesDebounced(); });
    cardSize.addEventListener('change', (e)=>{ preferences.cardSize = e.target.value; applyTheme(preferences); savePreferencesDebounced(); });
    toggleAnimations.addEventListener('change', (e)=>{ preferences.animations = e.target.checked; applyTheme(preferences); savePreferencesDebounced(); });
    toggleSfx.addEventListener('change', (e)=>{ preferences.sfx = e.target.checked; savePreferencesDebounced(); });
    bgMusicSelect.addEventListener('change', (e)=>{ preferences.bgMusic = e.target.value; savePreferencesDebounced(); updateBackgroundMusic(); });

    // New gameplay feature controls
    showFavorites.addEventListener('change', (e) => { 
      preferences.showFavorites = e.target.checked; 
      savePreferencesDebounced(); 
      updateFavoritesDisplay(); 
    });
    showRecent.addEventListener('change', (e) => { 
      preferences.showRecent = e.target.checked; 
      savePreferencesDebounced(); 
      updateRecentDisplay(); 
    });
    trackPlaytime.addEventListener('change', (e) => { 
      preferences.trackPlaytime = e.target.checked; 
      savePreferencesDebounced(); 
      if (!e.target.checked) {
        endSession();
      }
    });
    
    clearRecentBtn.addEventListener('click', () => {
      if (confirm('Clear recently played games?')) {
        recentGames = [];
        saveRecentGames();
        updateRecentDisplay();
        sounds.success();
      }
    });
    
    clearFavoritesBtn.addEventListener('click', () => {
      if (confirm('Clear all favorites?')) {
        favorites.clear();
        saveFavorites();
        updateFavoritesDisplay();
        updateGameButtons();
        sounds.success();
      }
    });
    
    offlineMode.addEventListener('change', (e) => { 
      preferences.offlineMode = e.target.checked; 
      savePreferencesDebounced();
      updateCacheStatus();
    });
    
    preloadGames.addEventListener('change', (e) => { 
      preferences.preloadGames = e.target.checked; 
      savePreferencesDebounced();
      if (e.target.checked) {
        preloadSelectedGames();
      }
    });
    
    clearCacheBtn.addEventListener('click', () => {
      if (confirm('Clear all cached data?')) {
        clearGameCache();
        sounds.success();
      }
    });
    
    // Login event listeners
    loginBtn.addEventListener('click', showLoginModal);
    loginSubmitBtn.addEventListener('click', handleLogin);
    signupBtn.addEventListener('click', handleSignup);
    loginCancelBtn.addEventListener('click', hideLoginModal);
    logoutBtn.addEventListener('click', handleLogout);
    
    // Enter key support for login
    loginEmail.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') loginPassword.focus();
    });
    loginPassword.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') handleLogin();
    });

    // Swatch selection
    swatches.forEach(s => s.addEventListener('click', () => { selectTheme(s.dataset.theme); }));
    function selectTheme(theme){ document.querySelectorAll('.swatch').forEach(w => w.classList.remove('selected')); const el = document.querySelector(`.swatch[data-theme='${theme}']`); if(el) el.classList.add('selected'); matrixControls.style.display = theme === 'matrix' ? 'block' : 'none'; preferences.theme = theme; applyTheme(preferences); savePreferencesDebounced(); }

    function markSelectedSwatch(){ document.querySelectorAll('.swatch').forEach(w=>w.classList.remove('selected')); const el = document.querySelector(`.swatch[data-theme='${preferences.theme}']`); if(el) el.classList.add('selected'); matrixControls.style.display = preferences.theme === 'matrix' ? 'block' : 'none'; }

    // Settings panel open/close
    function openSettings(){ settingsOverlay.style.display = 'block'; settingsPanel.classList.add('open'); settingsPanel.setAttribute('aria-hidden','false'); }
    function closeSettingsFn(){ settingsOverlay.style.display = 'none'; settingsPanel.classList.remove('open'); settingsPanel.setAttribute('aria-hidden','true'); }
    settingsBtn.addEventListener('click', openSettings);
    closeSettings.addEventListener('click', closeSettingsFn);
    settingsOverlay.addEventListener('click', closeSettingsFn);

    // =========== Cache Management ===========
    function updateCacheStatus() {
      if (preferences.offlineMode) {
        cacheStatus.textContent = 'Enabled';
        cacheStatus.style.color = 'var(--accent)';
      } else {
        cacheStatus.textContent = 'Disabled';
        cacheStatus.style.color = 'var(--muted)';
      }
    }
    
    function preloadSelectedGames() {
      // Preload favorite games and recent games when offline mode is enabled
      if (!preferences.preloadGames) return;
      
      const gamesToPreload = [...favorites, ...recentGames.slice(0, 5)];
      let cached = 0;
      
      gamesToPreload.forEach(gameId => {
        const game = allGames.find(g => g.id === gameId);
        if (game && game.Code) {
          try {
            localStorage.setItem(`cached_game_${gameId}`, JSON.stringify({
              id: game.id,
              name: game.Name,
              code: game.Code,
              category: game.Category,
              timestamp: Date.now()
            }));
            cached++;
          } catch (e) {
            console.warn('Failed to cache game:', game.Name, e);
          }
        }
      });
      
      if (cached > 0) {
        cacheStatus.textContent = `${cached} games cached`;
        cacheStatus.style.color = 'var(--accent)';
      }
    }
    
    function clearGameCache() {
      const keys = Object.keys(localStorage).filter(key => key.startsWith('cached_game_'));
      keys.forEach(key => localStorage.removeItem(key));
      updateCacheStatus();
    }
    
    // Background music stub
    let musicAudio = null;
    function updateBackgroundMusic(){ 
      if(musicAudio){ 
        musicAudio.pause(); 
        musicAudio = null; 
      } 
      if(preferences.bgMusic === 'none') return; 
      
      // Simple ambient sound implementation
      if (preferences.bgMusic === 'ambient1' && preferences.sfx) {
        // Create a subtle ambient loop using Web Audio API
        try {
          const audioContext = new (window.AudioContext || window.webkitAudioContext)();
          const oscillator1 = audioContext.createOscillator();
          const oscillator2 = audioContext.createOscillator();
          const gainNode = audioContext.createGain();
          
          oscillator1.connect(gainNode);
          oscillator2.connect(gainNode);
          gainNode.connect(audioContext.destination);
          
          oscillator1.frequency.value = 220;
          oscillator2.frequency.value = 330;
          oscillator1.type = 'sine';
          oscillator2.type = 'sine';
          
          gainNode.gain.value = 0.02; // Very quiet
          
          oscillator1.start();
          oscillator2.start();
          
          // Stop after 30 seconds to avoid continuous playing
          setTimeout(() => {
            try {
              oscillator1.stop();
              oscillator2.stop();
            } catch(e) {}
          }, 30000);
        } catch (e) {
          console.warn('Background music failed:', e);
        }
      }
    }

    // Category add UI
    showAddCategoryBtn.addEventListener('click', () => { if (newCategoryContainer.style.display === 'none' || newCategoryContainer.style.display === '') { newCategoryContainer.style.display = 'block'; newCategoryInput.focus(); } else { newCategoryContainer.style.display = 'none'; } });

    addCategoryBtn.addEventListener('click', () => {
      const newCat = newCategoryInput.value.trim();
      if (newCat === '') { alert('Please enter a category name.'); return; }
      const allOptions = Array.from(gameCategorySelect.options).map(o => o.value.toLowerCase());
      if (allOptions.includes(newCat.toLowerCase())) { alert('Category already exists.'); newCategoryInput.value = ''; newCategoryInput.focus(); return; }
      const optionA = document.createElement('option'); optionA.value = newCat; optionA.textContent = newCat; gameCategorySelect.appendChild(optionA);
      const optionB = document.createElement('option'); optionB.value = newCat; optionB.textContent = newCat; editGameCategorySelect.appendChild(optionB);
      const existingBtn = Array.from(document.querySelectorAll('.category-btn')).find(b => b.dataset.category.toLowerCase() === newCat.toLowerCase());
      if (!existingBtn) { const btn = document.createElement('button'); btn.className = 'category-btn'; btn.dataset.category = newCat; btn.textContent = newCat; categoryButtonsContainer.appendChild(btn); }
      optionA.selected = true; newCategoryContainer.style.display = 'none'; newCategoryInput.value = '';
    });

    // Delete modal handling already wired earlier

    // Init sequence that loads prefs, then app
    async function init() {
      console.log('Initializing app...');
      
      // Check authentication state first
      try {
        const { data: { session } } = await client.auth.getSession();
        if (session?.user) {
          updateUserInterface(session.user);
          currentUserId = session.user.id;
        }
      } catch (error) {
        console.warn('Auth session check failed:', error);
      }
      
      await loadPreferences();
      loadFavorites();
      loadRecentGames();
      loadGameStats();
      markSelectedSwatch();
      resizeCanvas();
      resetMatrixInterval();
      updateBackgroundMusic();
      updateCacheStatus();
      await initApp();
      
      console.log('App initialization complete');
      
      // Add sound effects to existing buttons
      document.querySelectorAll('button').forEach(btn => {
        if (!btn.classList.contains('favorite-btn')) {
          btn.addEventListener('mouseenter', () => sounds.hover());
          btn.addEventListener('click', () => sounds.click());
        }
      });
    }

    init();
    
    // Listen for auth state changes
    client.auth.onAuthStateChange((event, session) => {
      console.log('Auth state changed:', event, session?.user?.email);
      if (event === 'SIGNED_IN' && session?.user) {
        updateUserInterface(session.user);
        currentUserId = session.user.id;
        loadPreferences(); // Reload preferences from cloud
      } else if (event === 'SIGNED_OUT') {
        updateUserInterface(null);
        currentUserId = null;
      }
    });
    
    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
      endSession();
    });
    
    // End session when game iframe is closed or changed
    const originalRunCode = runCode;
    function runCode() {
      endSession();
      originalRunCode();
    }

    // Accessibility: close settings with Escape
    document.addEventListener('keydown', (e)=>{ if(e.key === 'Escape'){ closeSettingsFn(); } });

  </script>
</body>
</html>
